"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[284],{7125:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return o},metadata:function(){return m},toc:function(){return d}});var n=a(7462),i=a(3366),r=(a(7294),a(3905)),s=["components"],o={sidebar_label:"library"},l="Library plugin",m={unversionedId:"develop/plugins/library",id:"develop/plugins/library",title:"Library plugin",description:"This plugin allows you to manage several types of resources, creating an abstraction layer over any entity you want to define common multimedia resource properties.",source:"@site/docs/develop/plugins/library.mdx",sourceDirName:"develop/plugins",slug:"/develop/plugins/library",permalink:"/leemons-docs/develop/plugins/library",draft:!1,editUrl:"https://github.com/leemonade/leemons-docs/tree/main/docs/develop/plugins/library.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"library"},sidebar:"tutorialSidebar",previous:{title:"dataset",permalink:"/leemons-docs/develop/plugins/dataset"},next:{title:"multilanguage",permalink:"/leemons-docs/develop/plugins/multilanguage"}},p={},d=[{value:"Files",id:"files",level:2},{value:"Metadata",id:"metadata",level:3},{value:"Assets",id:"assets",level:2},{value:"Asset Categories",id:"asset-categories",level:2},{value:"Pre-installed categories",id:"pre-installed-categories",level:3},{value:"Media files",id:"media-files",level:3},{value:"Versioning",id:"versioning",level:4},{value:"Bookmarks",id:"bookmarks",level:3},{value:"Services",id:"services",level:2},{value:"Register an asset",id:"register-asset",level:3},{value:"Allowing access",id:"allowing-access",level:4},{value:"Register a file",id:"register-a-file",level:3},{value:"Create a category",id:"create-category",level:3}],c={toc:d};function u(e){var t=e.components,a=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"library-plugin"},"Library plugin"),(0,r.kt)("p",null,"This plugin allows you to manage several types of resources, creating an abstraction layer over any entity you want to define common multimedia resource properties."),(0,r.kt)("h2",{id:"files"},"Files"),(0,r.kt)("p",null,"Files are the lowest level atoms in the Library."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"ATTENTION")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"A file can NOT be managed from the Library frontend, but CAN be managed from the ",(0,r.kt)("inlineCode",{parentName:"p"},"service")," ",(0,r.kt)("a",{parentName:"p",href:"#register-a-file"},"Register a file"),"."))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"File Schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// LeebraryFile\n{\n    name: string, // Required.\n    provider: string, // Stores the name of the supplier being used by Library at the time of file registration.\n    type: string, // Stores the mime-type of the file.\n    extension: string, // Stores the file extension. E.g. docx, xls, jpg, etc.\n    metadata: MetadataObject, // Stores the metadata obtained from the file.\n}\n"))),(0,r.kt)("h3",{id:"metadata"},"Metadata"),(0,r.kt)("p",null,"When registering a file, the plugin tries to extract the following information to be stored as metadata."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Metadata object"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// MetadataObject\n{\n    format: string, // Indicates the file format. E.g. PNG, DOCX, MOV\n    words: number, // For file types that support it. E.g. DOCX, TXT\n    duration: number, // Retrieves the duration of the file when they are video or audio.\n    revision: number, // Retrieves the revision of the file in case it supports it. E.g. Office files that support it.\n    pages: number, // Retrieves the number of pages for those files that support it. E.g. DOC, ODF, etc\n    slides: number, // Returns the number of slides for files that support it. E.g. PPT, etc\n    spreadsheets: number, // Indicates the number of spreadsheets. E.g. XLS, etc\n    books: number, //\n    height: number, // Image height, for image file type\n    width: number, // Image width, for image file type\n    bitrate: number, // Gets the bitrate, for video and audio files\n}\n"))),(0,r.kt)("h2",{id:"assets"},"Assets"),(0,r.kt)("p",null,"When you want to have more control over a file, Library has the ",(0,r.kt)("inlineCode",{parentName:"p"},"Asset")," entity."),(0,r.kt)("p",null,"By default, resources in Library are a type of ",(0,r.kt)("a",{parentName:"p",href:"#media-files"},"Media Files")," ."),(0,r.kt)("p",null,"The idea of the Library is that all entities that need to have similar characteristics, refer to a resource of type ",(0,r.kt)("a",{parentName:"p",href:"#media-files"},"Media Files"),"."),(0,r.kt)("h2",{id:"asset-categories"},"Asset Categories"),(0,r.kt)("p",null,"All resources stored in the Library must belong to a category."),(0,r.kt)("p",null,"All categories must have a unique identifier, which must be public, and which will be used for searching or browsing, called a ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," in the data model."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Category Schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// LeebraryCategory\n{\n    key: string, // Required. Unique identifier set by the plugin that registers the category\n    pluginOwner: string, // Required.  Defaults to the same Library plugin. Defaults to "plugins.leebrary".\n    provider: string, // Required. Indicates the name of the logic provider for this category. Defaults to "leebrary".\n    creatable: boolean, // Indicates whether the category allows "creating" resources from the frontend. Defaults to FALSE\n    duplicable: boolean\', // Indicates whether the category allows "mirroring" of resources from the frontend. Defaults to FALSE\n    listCardComponent: string, // Optional. Indicates the path of a custom Card component to show in the list.\n  detailComponent: string, // Optional. Indicates the path of a custom Card detail component.\n}\n'))),(0,r.kt)("p",null,"In addition to the Schema, categories can appear in the Library Menu, and for this it is necessary to indicate these parameters at the time of category registration."),(0,r.kt)("p",null,"More info in ",(0,r.kt)("a",{parentName:"p",href:"#create-category"},"Creating a category"),"."),(0,r.kt)("h3",{id:"pre-installed-categories"},"Pre-installed categories"),(0,r.kt)("p",null,"The default categories that comes pre-installed with the plugin are:"),(0,r.kt)("h3",{id:"media-files"},"Media files"),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"KEY")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Category key: ",(0,r.kt)("inlineCode",{parentName:"p"},"media-files")))),(0,r.kt)("p",null,"This is the simplest category, and is used by default in the plugin resources."),(0,r.kt)("h4",{id:"versioning"},"Versioning"),(0,r.kt)("p",null,"Library uses the ",(0,r.kt)("a",{parentName:"p",href:".."},"Version control")," plugin to manage its ",(0,r.kt)("inlineCode",{parentName:"p"},"Assets")," IDs."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Asset Schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// Asset\n{\n  id: CurrentVersion.id, // ID generated by the version control plugin\n  name: string, // Required\n  tagline: string, // Tagline or Subtitle\n  description: string,\n  color: string, // Hex color\n  cover: LeebraryFile, // File object\n  public: boolean, // Indicates whether the resource is visible to all platform users. Defaults to FALSE\n  category: LeebraryCategory, // Category object. Defaults to key "media-files"\n  indexable: boolean, // Indicates whether or not the resource is visible to searches, listings, etc. in the frontend. Defaults to TRUE\n}\n'))),(0,r.kt)("h3",{id:"bookmarks"},"Bookmarks"),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"KEY")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Category key: ",(0,r.kt)("inlineCode",{parentName:"p"},"bookmarks")))),(0,r.kt)("p",null,"It is the special catagory for storing external URLs within the Library."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Assets")," in this category type also make use of ",(0,r.kt)("a",{parentName:"p",href:"#media-files"},"Media Files")," category to store common data."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Asset Schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'{\n  id: UUID, // Autogenerated\n  asset: Asset.CurrentVersion.id, // Refers to the ID of the resource "media-file".\n  url: string,\n  icon: LeebraryFile, // File Object\n}\n'))),(0,r.kt)("h2",{id:"services"},"Services"),(0,r.kt)("h3",{id:"register-asset"},"Register an asset"),(0,r.kt)("p",null,"To register an ",(0,r.kt)("a",{parentName:"p",href:"#assets"},"Asset")," within Library, we must use the ",(0,r.kt)("inlineCode",{parentName:"p"},"add")," method of the ",(0,r.kt)("inlineCode",{parentName:"p"},"assets")," service."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const myFile = {\n  readStream: fs.createReadStream('my-file.jpg'),\n  contentType: 'image/png',\n};\n\nawait leemons.getPlugin('leebrary').services.assets.add({ file: myFile, name: 'my-new-file' });\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Suppose we want to upload and register a resource from a form:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// This data comes directly from the file upload in the form.\nconst fileFromTempPath = {\n  path: 'my-file.docx',\n  type: 'application/msword',\n};\n\n// The cover comes from a Library image\nconst coverFromFile = 'other-file-id';\n")),(0,r.kt)("p",null,"Then we simply call the service method with the option we need:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const myAsset = await leemons.getPlugin('leebrary').services.assets.add(\n  {\n    file: fileFromTempPath,\n    cover: coverFromFile,\n    color: '#FABADA',\n    name: 'This is the title card', // Required\n    description: 'This is my awesome file',\n    tags: ['awesome', 'leemons'],\n    category: 'my-category-key',\n    tagline: 'This is the subtitle',\n    // Optional fields\n    indexable: true, // To make the resource visible in Library. Defaults to TRUE\n    public: false, // If we want to restrict access through permissions. Defaults to FALSE\n  },\n  {\n    userSession,\n    transacting,\n  }\n);\n"))),(0,r.kt)("h4",{id:"allowing-access"},"Allowing access"),(0,r.kt)("p",null,"By default, an Asset is created as private and the ",(0,r.kt)("inlineCode",{parentName:"p"},"userAgent")," that creates it is the ",(0,r.kt)("inlineCode",{parentName:"p"},"owner"),", so only the owner can see it."),(0,r.kt)("p",null,"To change this, we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"canAccess")," property and use the default roles that Library provides:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"editor"),(0,r.kt)("li",{parentName:"ul"},"viewer"),(0,r.kt)("li",{parentName:"ul"},"owner")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const myAsset = await leemons.getPlugin('leebrary').services.assets.add({\n  ...otherAssetFields,\n  canAccess: [\n    { userAgent: 'some-id-01', role: 'editor' },\n    { userAgent: 'some-id-02', role: 'viewer' },\n    { userAgent: 'some-id-03', role: 'owner' },\n  ],\n});\n")),(0,r.kt)("h3",{id:"register-a-file"},"Register a file"),(0,r.kt)("p",null,"To register a file in Library, we must ",(0,r.kt)("a",{parentName:"p",href:"#register-asset"},"register it as an Asset")," in the simplest way."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"We want to upload and register a file. There are 4 options to prepare a file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fs = require('fs');\n\n// Option 1\nconst fileFromStream = {\n    readStream: fs.createReadStream('my-file.jpg'),\n    contentType: 'image/png'\n};\n\n// Option 2\nconst fileFromPath = {\n    path: 'my-file.jpg',\n    type: 'image/png'\n};\n\n// Option 3\nconst fileFromUrl = 'https://my-domain.com/my-file.jpg';\n\n// Option 4\nconst fileFromOtherFile = 'other-file-id':\n\n")),(0,r.kt)("p",null,"Then we simply call the service method with the option we need:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const assetService = leemons.getPlugin('leebrary').services.assets;\nconst myAsset = await assetService.add(\n  {\n    file: fileFromStream || fileFromPath || fileFromUrl || fileFromOtherFile,\n    name: 'my-new-file',\n    // Optional as appropriate\n    indexable: false, // In case we do not want it to be listed in Library.\n    public: true, // If we want all users to have access to it\n  },\n  {\n    userSession,\n    transacting,\n  }\n);\n"))),(0,r.kt)("h3",{id:"create-category"},"Create a category"),(0,r.kt)("p",null,"If a plugin wants to register a category within Library to manage its resources, it can be done with the ",(0,r.kt)("inlineCode",{parentName:"p"},"add")," method of the ",(0,r.kt)("inlineCode",{parentName:"p"},"categories")," service."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"await leemons.getPlugin('leebrary').services.categories.add(myCategoryData);\n")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"MENU")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If we want the category we are creating to appear in the Library menu, we must indicate the menu properties, as well as the permissions related to the ",(0,r.kt)("inlineCode",{parentName:"p"},"menu-item"),"."))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Examples"),(0,r.kt)("p",null,"Let's create a category with the following data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const myCategoryData = {\n  // Category properties\n  key: 'my-awesome-category',\n  creatable: true,\n  createUrl: '/private/my-plugin/create',\n\n  // Used to perform searchs. Set as 'leebrary' to search only in assets fields\n  provider: 'leebrary',\n\n  // Menu properties\n  menu: {\n    item: {\n      iconSvg: '/public/my-plugin/category-icon.svg',\n      activeIconSvg: '/public/my-plugin/category-icon_active.svg',\n      label: {\n        en: 'My awesome category',\n        es: 'Mi incre\xedble categor\xeda',\n      },\n    },\n    permissions: [\n      {\n        permissionName: 'plugin.my-plugin.my-permission',\n        actionNames: ['view', 'update', 'create', 'delete', 'admin'],\n      },\n    ],\n  },\n\n  // Frontend config\n  // Paths must be realtive to plugin's frontend \"src/widgets/leebrary\"\n    listCardComponent: 'path/to/my/card-component',\n    detailComponent: 'path/to/my/detail-component',\n    \n    // Used to compose the path on dynamicImport of Card components. Eg:\n    // import(`@leemons/plugins/${componentOwner.split('.')[1]}/src/widgets/leebrary/${listCardComponent}.js`)\n  componentOwner: 'plugins.my-plugin', // should begin with \"plugins\" or \"providers\" as appropriate.\n};\n"))))}u.isMDXComponent=!0}}]);